"use client"
// import type { Metadata } from "next";

import { cn } from "@/lib/cn";
import { SUPPORTED_FONT_STYLES as fonts } from "@/lib/fonts";
import Providers from "@/contexts/Providers";
import DashboardHeaderWrapper from "@/app/(withlayout)/components/DashboardHeaderWrapper";
import {ReactNode, useEffect, useState} from "react";
import {FaFileCode, FaHome, FaAngleDoubleLeft} from "react-icons/fa";
import {BsFillDiagram3Fill, BsFolder, BsGrid1X2} from "react-icons/bs";
import {usePathname} from "next/navigation";
import Link from "next/link";

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }: { children: ReactNode }) {
  const [shouldOpenSidebar, setShouldOpenSidebar] = useState(true);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const handleResize = () => {
        setIsMobile(window.innerWidth < 768);
      };

      window.addEventListener('resize', handleResize);
      handleResize();
      return () => window.removeEventListener('resize', handleResize);
    }
  }, []);

  const SidebarLink = ({ href, icon, text }: { href: string; icon: JSX.Element; text: string }) => {
    const pathname = usePathname();

    const linkClass = cn(
      "text-[#e0dddd] px-2 py-2 flex justify-start items-center gap-2 rounded-[4px]",
      { 'bg-[#ffffff26]': pathname === href }
    );

    return (
      <li>
        <Link href={href} prefetch={true}>
          <div className='flex items-center p-2 text-[#e0dddd] rounded-lg hover:bg-gray-700 group'>
            <span className='text-xl w-5 h-5 mr-3'>{icon}</span>
            <span className='font-medium'>{text}</span>
          </div>
        </Link>
      </li>
    );
  };

  const sidenavToggleComponent= () : ReactNode => {
    return(
      <button
        data-drawer-target="default-sidebar"
        data-drawer-toggle="default-sidebar"
        aria-controls="default-sidebar"
        onClick={() => setShouldOpenSidebar(!shouldOpenSidebar)}
        className="inline-flex items-center p-2 mt-2 ms-3 text-sm text-gray-500 rounded-lg focus:outline-none dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600">
        <svg className="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20"
             xmlns="http://www.w3.org/2000/svg">
          <path clipRule="evenodd" fillRule="evenodd"
                d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"></path>
        </svg>
      </button>
  )
}

  return (
    <html
      lang="en"
      className={cn(
        fonts[0].variable,
        fonts[1].variable,
        fonts[2].variable
      )}
    >
    <body
      className={cn(
        "relative grid min-h-screen grid-rows-[auto,1fr] text-sm",
        "bg-almost-black text-greyish caret-fuchsia-500 selection:bg-fuchsia-500 selection:text-amlost-white"
      )}
    >
    <Providers>
      <DashboardHeaderWrapper sidenavToggleComponent={isMobile ? sidenavToggleComponent() : undefined} />
      <div className="flex">
        <aside
          className={`w-[200px] z-40 h-full transition-all duration-700 ${(!shouldOpenSidebar && isMobile) ? "absolute left-[-200px]" : "relative block left-0 "}`}
          aria-label="Sidebar"
        >
          <div className="flex justify-center items-center h-full px-3 py-4 overflow-y-auto">
            <ul className="flex flex-col space-y-2 font-medium">
              <SidebarLink href="/" icon={<FaHome/>} text="Home"/>
              <SidebarLink href="/projects" icon={<BsFolder/>} text="Projects"/>
              <SidebarLink href="/templates" icon={<BsGrid1X2/>} text="Templates"/>
              <SidebarLink href="/snippet" icon={<FaFileCode/>} text="Codes"/>
              <SidebarLink href="/diagram" icon={<BsFillDiagram3Fill/>} text="Diagrams"/>
            </ul>

            <button
              className="md:hidden absolute left-[50%] bottom-[50px]"
              onClick={() => setShouldOpenSidebar(!shouldOpenSidebar)}
            >
              <FaAngleDoubleLeft />
            </button>
          </div>
        </aside>
        <main className={cn("grid place-items-center w-full m-4")}>{children}</main>
      </div>
    </Providers>
    </body>
    </html>
  );
}